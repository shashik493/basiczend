(function (e) {
    var t = function (e) {
        this.defaultOptions = {id: t.newGuid(), type: t.TYPE_PRIMARY, size: t.SIZE_NORMAL, cssClass: "", title: null, message: null, buttons: [], closable: true, spinicon: t.ICON_SPINNER, data: {}, onshow: null, onhide: null, autodestroy: true, draggable: false};
        this.indexedButtons = {};
        this.registeredButtonHotkeys = {};
        this.draggableData = {isMouseDown: false, mouseOffset: {}};
        this.realized = false;
        this.opened = false;
        this.initOptions(e);
        this.holdThisInstance()
    };
    t.NAMESPACE = "bootstrap-dialog";
    t.TYPE_DEFAULT = "type-default";
    t.TYPE_INFO = "type-info";
    t.TYPE_PRIMARY = "type-primary";
    t.TYPE_SUCCESS = "type-success";
    t.TYPE_WARNING = "type-warning";
    t.TYPE_DANGER = "type-danger";
    t.DEFAULT_TEXTS = {};
    t.DEFAULT_TEXTS[t.TYPE_DEFAULT] = "Information";
    t.DEFAULT_TEXTS[t.TYPE_INFO] = "Information";
    t.DEFAULT_TEXTS[t.TYPE_PRIMARY] = "Information";
    t.DEFAULT_TEXTS[t.TYPE_SUCCESS] = "Success";
    t.DEFAULT_TEXTS[t.TYPE_WARNING] = "Warning";
    t.DEFAULT_TEXTS[t.TYPE_DANGER] = "Danger";
    t.SIZE_NORMAL = "size-normal";
    t.SIZE_LARGE = "size-large";
    t.BUTTON_SIZES = {};
    t.BUTTON_SIZES[t.SIZE_NORMAL] = "";
    t.BUTTON_SIZES[t.SIZE_LARGE] = "btn-lg";
    t.ICON_SPINNER = "glyphicon glyphicon-asterisk";
    t.dialogs = {};
    t.openAll = function () {
        e.each(t.dialogs, function (e, t) {
            t.open()
        })
    };
    t.closeAll = function () {
        e.each(t.dialogs, function (e, t) {
            t.close()
        })
    };
    t.prototype = {constructor: t, initOptions: function (t) {
        this.options = e.extend(true, this.defaultOptions, t);
        return this
    }, holdThisInstance: function () {
        t.dialogs[this.getId()] = this;
        return this
    }, initModalStuff: function () {
        this.setModal(this.createModal()).setModalDialog(this.createModalDialog()).setModalContent(this.createModalContent()).setModalHeader(this.createModalHeader()).setModalBody(this.createModalBody()).setModalFooter(this.createModalFooter());
        this.getModal().append(this.getModalDialog());
        this.getModalDialog().append(this.getModalContent());
        this.getModalContent().append(this.getModalHeader()).append(this.getModalBody()).append(this.getModalFooter());
        return this
    }, createModal: function () {
        var t = e('<div class="modal fade" tabindex="-1"></div>');
        t.prop("id", this.getId());
        return t
    }, getModal: function () {
        return this.$modal
    }, setModal: function (e) {
        this.$modal = e;
        return this
    }, createModalDialog: function () {
        return e('<div class="modal-dialog"></div>')
    }, getModalDialog: function () {
        return this.$modalDialog
    }, setModalDialog: function (e) {
        this.$modalDialog = e;
        return this
    }, createModalContent: function () {
        return e('<div class="modal-content"></div>')
    }, getModalContent: function () {
        return this.$modalContent
    }, setModalContent: function (e) {
        this.$modalContent = e;
        return this
    }, createModalHeader: function () {
        return e('<div class="modal-header" style="background-color:#428BCA;color:#FFFFFF;font-weight:bold;"></div>')
    }, getModalHeader: function () {
        return this.$modalHeader
    }, setModalHeader: function (e) {
        this.$modalHeader = e;
        return this
    }, createModalBody: function () {
        return e('<div class="modal-body"></div>')
    }, getModalBody: function () {
        return this.$modalBody
    }, setModalBody: function (e) {
        this.$modalBody = e;
        return this
    }, createModalFooter: function () {
        return e('<div class="modal-footer"></div>')
    }, getModalFooter: function () {
        return this.$modalFooter
    }, setModalFooter: function (e) {
        this.$modalFooter = e;
        return this
    }, createDynamicContent: function (e) {
        var t = null;
        if (typeof e === "function") {
            t = e.call(e, this)
        } else {
            t = e
        }
        if (typeof t === "string") {
            t = this.formatStringContent(t)
        }
        return t
    }, formatStringContent: function (e) {
        return e.replace(/\r\n/g, "<br />").replace(/[\r\n]/g, "<br />")
    }, setData: function (e, t) {
        this.options.data[e] = t;
        return this
    }, getData: function (e) {
        return this.options.data[e]
    }, setId: function (e) {
        this.options.id = e;
        return this
    }, getId: function () {
        return this.options.id
    }, getType: function () {
        return this.options.type
    }, setType: function (e) {
        this.options.type = e;
        return this
    }, getSize: function () {
        return this.options.size
    }, setSize: function (e) {
        this.options.size = e;
        return this
    }, getCssClass: function () {
        return this.options.cssClass
    }, setCssClass: function (e) {
        this.options.cssClass = e;
        return this
    }, getTitle: function () {
        return this.options.title
    }, setTitle: function (e) {
        this.options.title = e;
        this.updateTitle();
        return this
    }, updateTitle: function () {
        if (this.isRealized()) {
            var e = this.getTitle() !== null ? this.createDynamicContent(this.getTitle()) : this.getDefaultText();
            this.getModalHeader().find("." + this.getNamespace("title")).html("").append(e)
        }
        return this
    }, getMessage: function () {
        return this.options.message
    }, setMessage: function (e) {
        this.options.message = e;
        this.updateMessage();
        return this
    }, updateMessage: function () {
        if (this.isRealized()) {
            var e = this.createDynamicContent(this.getMessage());
            this.getModalBody().find("." + this.getNamespace("message")).html("").append(e)
        }
        return this
    }, isClosable: function () {
        return this.options.closable
    }, setClosable: function (e) {
        this.options.closable = e;
        this.updateClosable();
        return this
    }, getSpinicon: function () {
        return this.options.spinicon
    }, setSpinicon: function (e) {
        this.options.spinicon = e;
        return this
    }, addButton: function (e) {
        this.options.buttons.push(e);
        return this
    }, addButtons: function (t) {
        var n = this;
        e.each(t, function (e, t) {
            n.addButton(t)
        });
        return this
    }, getButtons: function () {
        return this.options.buttons
    }, setButtons: function (e) {
        this.options.buttons = e;
        return this
    }, getButton: function (e) {
        if (typeof this.indexedButtons[e] !== "undefined") {
            return this.indexedButtons[e]
        }
        return null
    }, getButtonSize: function () {
        if (typeof t.BUTTON_SIZES[this.getSize()] !== "undefined") {
            return t.BUTTON_SIZES[this.getSize()]
        }
        return""
    }, isAutodestroy: function () {
        return this.options.autodestroy
    }, setAutodestroy: function (e) {
        this.options.autodestroy = e
    }, getDefaultText: function () {
        return t.DEFAULT_TEXTS[this.getType()]
    }, getNamespace: function (e) {
        return t.NAMESPACE + "-" + e
    }, createHeaderContent: function () {
        var t = e("<div></div>");
        t.addClass(this.getNamespace("header"));
        t.append(this.createTitleContent());
        t.append(this.createCloseButton());
        return t
    }, createTitleContent: function () {
        var t = e("<div></div>");
        t.addClass(this.getNamespace("title"));
        return t
    }, createCloseButton: function () {
        var t = e("<div></div>");
        t.addClass(this.getNamespace("close-button"));
        var n = e('<button class="close">&times;</button>');
        t.append(n);
        t.on("click", {dialog: this}, function (e) {
            e.data.dialog.close()
        });
        return t
    }, createBodyContent: function () {
        var t = e("<div></div>");
        t.addClass(this.getNamespace("body"));
        t.append(this.createMessageContent());
        return t
    }, createMessageContent: function () {
        var t = e("<div></div>");
        t.addClass(this.getNamespace("message"));
        return t
    }, createFooterContent: function () {
        var t = e("<div></div>");
        t.addClass(this.getNamespace("footer"));
        t.append(this.createFooterButtons());
        return t
    }, createFooterButtons: function () {
        var n = this;
        var r = e("<div></div>");
        r.addClass(this.getNamespace("footer-buttons"));
        this.indexedButtons = {};
        e.each(this.options.buttons, function (e, i) {
            if (!i.id) {
                i.id = t.newGuid()
            }
            var s = n.createButton(i);
            n.indexedButtons[i.id] = s;
            r.append(s)
        });
        return r
    }, createButton: function (t) {
        var n = e('<button class="btn"></button>');
        n.addClass(this.getButtonSize());
        n.prop("id", t.id);
        if (typeof t.icon !== undefined && e.trim(t.icon) !== "") {
            n.append(this.createButtonIcon(t.icon))
        }
        if (typeof t.label !== undefined) {
            n.append(t.label)
        }
        if (typeof t.cssClass !== undefined && e.trim(t.cssClass) !== "") {
            n.addClass(t.cssClass)
        } else {
            n.addClass("btn-default")
        }
        if (typeof t.hotkey !== undefined) {
            this.registeredButtonHotkeys[t.hotkey] = n
        }
        n.on("click", {dialog: this, $button: n, button: t}, function (e) {
            var t = e.data.dialog;
            var n = e.data.$button;
            var r = e.data.button;
            if (typeof r.action === "function") {
                r.action.call(n, t)
            }
            if (r.autospin) {
                n.toggleSpin(true)
            }
        });
        this.enhanceButton(n);
        return n
    }, enhanceButton: function (e) {
        e.dialog = this;
        e.toggleEnable = function (e) {
            var t = this;
            t.prop("disabled", !e).toggleClass("disabled", !e);
            return t
        };
        e.enable = function () {
            var e = this;
            e.toggleEnable(true);
            return e
        };
        e.disable = function () {
            var e = this;
            e.toggleEnable(false);
            return e
        };
        e.toggleSpin = function (t) {
            var n = this;
            var r = n.dialog;
            var i = n.find("." + r.getNamespace("button-icon"));
            if (t) {
                i.hide();
                e.prepend(r.createButtonIcon(r.getSpinicon()).addClass("icon-spin"))
            } else {
                i.show();
                e.find(".icon-spin").remove()
            }
            return n
        };
        e.spin = function () {
            var e = this;
            e.toggleSpin(true);
            return e
        };
        e.stopSpin = function () {
            var e = this;
            e.toggleSpin(false);
            return e
        };
        return this
    }, createButtonIcon: function (t) {
        var n = e("<span></span>");
        n.addClass(this.getNamespace("button-icon")).addClass(t);
        return n
    }, enableButtons: function (t) {
        e.each(this.indexedButtons, function (e, n) {
            n.toggleEnable(t)
        });
        return this
    }, updateClosable: function () {
        if (this.isRealized()) {
            this.getModalHeader().find("." + this.getNamespace("close-button")).toggle(this.isClosable())
        }
        return this
    }, onShow: function (e) {
        this.options.onshow = e;
        return this
    }, onHide: function (e) {
        this.options.onhide = e;
        return this
    }, isRealized: function () {
        return this.realized
    }, setRealized: function (e) {
        this.realized = e;
        return this
    }, isOpened: function () {
        return this.opened
    }, setOpened: function (e) {
        this.opened = e;
        return this
    }, handleModalEvents: function () {
        this.getModal().on("show.bs.modal", {dialog: this}, function (e) {
            var t = e.data.dialog;
            typeof t.options.onshow === "function" && t.options.onshow(t);
            t.showPageScrollBar(true)
        });
        this.getModal().on("hide.bs.modal", {dialog: this}, function (e) {
            var t = e.data.dialog;
            typeof t.options.onhide === "function" && t.options.onhide(t)
        });
        this.getModal().on("hidden.bs.modal", {dialog: this}, function (t) {
            var n = t.data.dialog;
            n.isAutodestroy() && e(this).remove();
            n.showPageScrollBar(false)
        });
        this.getModal().on("click", {dialog: this}, function (e) {
            e.target === this && e.data.dialog.isClosable() && e.data.dialog.close()
        });
        this.getModal().on("keyup", {dialog: this}, function (e) {
            e.which === 27 && e.data.dialog.isClosable() && e.data.dialog.close()
        });
        this.getModal().on("keyup", {dialog: this}, function (t) {
            var n = t.data.dialog;
            if (typeof n.registeredButtonHotkeys[t.which] !== "undefined") {
                var r = e(n.registeredButtonHotkeys[t.which]);
                !r.prop("disabled") && r.focus().trigger("click")
            }
        });
        return this
    }, makeModalDraggable: function () {
        if (this.options.draggable) {
            this.getModalHeader().addClass(this.getNamespace("draggable")).on("mousedown", {dialog: this}, function (e) {
                var t = e.data.dialog;
                t.draggableData.isMouseDown = true;
                var n = t.getModalContent().offset();
                t.draggableData.mouseOffset = {top: e.clientY - n.top, left: e.clientX - n.left}
            });
            this.getModal().on("mouseup mouseleave", {dialog: this}, function (e) {
                e.data.dialog.draggableData.isMouseDown = false
            });
            e("body").on("mousemove", {dialog: this}, function (e) {
                var t = e.data.dialog;
                if (!t.draggableData.isMouseDown) {
                    return
                }
                t.getModalContent().offset({top: e.clientY - t.draggableData.mouseOffset.top, left: e.clientX - t.draggableData.mouseOffset.left})
            })
        }
        return this
    }, showPageScrollBar: function (t) {
        e(document.body).toggleClass("modal-open", t)
    }, realize: function () {
        this.initModalStuff();
        this.getModal().addClass(t.NAMESPACE).addClass(this.getType()).addClass(this.getSize()).addClass(this.getCssClass());
        this.getModalFooter().append(this.createFooterContent());
        this.getModalHeader().append(this.createHeaderContent());
        this.getModalBody().append(this.createBodyContent());
        this.getModal().modal({backdrop: "static", keyboard: false, show: false});
        this.makeModalDraggable();
        this.handleModalEvents();
        this.setRealized(true);
        this.updateTitle();
        this.updateMessage();
        this.updateClosable();
        return this
    }, open: function () {
        !this.isRealized() && this.realize();
        this.getModal().modal("show");
        this.setOpened(true);
        return this
    }, close: function () {
        this.getModal().modal("hide");
        if (this.isAutodestroy()) {
            delete t.dialogs[this.getId()]
        }
        this.setOpened(false);
        return this
    }};
    t.newGuid = function () {
        return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (e) {
            var t = Math.random() * 16 | 0, n = e === "x" ? t : t & 3 | 8;
            return n.toString(16)
        })
    };
    t.show = function (e) {
        return(new t(e)).open()
    };
    t.alert = function () {
        var n = {};
        var r = {type: t.TYPE_PRIMARY, title: null, message: null, closable: true, buttonLabel: "OK", callback: null};
        if (typeof arguments[0] === "object" && arguments[0].constructor === {}.constructor) {
            n = e.extend(true, r, arguments[0])
        } else {
            n = e.extend(true, r, {message: arguments[0], closable: false, buttonLabel: "OK", callback: typeof arguments[1] !== "undefined" ? arguments[1] : null})
        }
        return(new t({type: n.type, title: n.title, message: n.message, closable: n.closable, data: {callback: n.callback}, onhide: function (e) {
            !e.getData("btnClicked") && e.isClosable() && typeof e.getData("callback") === "function" && e.getData("callback")(false)
        }, buttons: [
            {label: n.buttonLabel, action: function (e) {
                e.setData("btnClicked", true);
                typeof e.getData("callback") === "function" && e.getData("callback")(true);
                e.close()
            }}
        ]})).open()
    };
    t.confirm = function (e, n) {
        return(new t({title: "Confirmation", message: e, closable: false, data: {callback: n}, buttons: [
            {label: "Cancel", action: function (e) {
                typeof e.getData("callback") === "function" && e.getData("callback")(false);
                e.close()
            }},
            {label: "OK", cssClass: "btn-primary", action: function (e) {
                typeof e.getData("callback") === "function" && e.getData("callback")(true);
                e.close()
            }}
        ]})).open()
    };
    t.init = function () {
        var e = typeof module !== "undefined" && module.exports;
        if (e) {
            module.exports = t
        } else {
            if (typeof define === "function" && define.amd) {
                define("bootstrap-dialog", function () {
                    return t
                })
            } else {
                window.BootstrapDialog = t
            }
        }
    };
    t.init()
})(window.jQuery)